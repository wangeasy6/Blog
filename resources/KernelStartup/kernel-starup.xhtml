<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by OpenOffice.org - see http://xml.openoffice.org/odf2xhtml for more info.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">- no title specified</title><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.contributor" content="Easy Wang"/><meta name="DCTERMS.modified" content="2025-08-12T15:37:40.26" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:10pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.ta1 { writing-mode:lr-tb; }
	.Default { font-family:Arial; }
	.Excel_20_Built-in_20_Normal { font-family:等线; background-color:transparent; border-style:none; vertical-align:top; margin-left:0cm; writing-mode:page; color:#000000; font-size:11pt; font-style:normal; text-shadow:none; text-decoration:none ! important; font-weight:normal; }
	.ce1 { background-color:transparent; border-style:none; color:#000000; font-size:12pt; font-style:normal; font-weight:bold; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; text-align:center ! important; }
	.ce10 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:bold; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; }
	.ce11 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; text-align:left ! important; }
	.ce12 { background-color:transparent; border-style:none; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; }
	.ce13 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; text-align:left ! important; }
	.ce14 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:bold; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; }
	.ce15 { background-color:transparent; border-style:none; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; }
	.ce16 { background-color:transparent; border-style:none; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:等线; text-decoration:none ! important; vertical-align:middle; writing-mode:page; text-align:center ! important; }
	.ce2 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; }
	.ce3 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; text-align:left ! important; }
	.ce4 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; }
	.ce5 { background-color:transparent; border-style:none; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; }
	.ce6 { background-color:transparent; border-style:none; color:#000000; font-size:12pt; font-style:normal; font-weight:bold; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; text-align:center ! important; }
	.ce7 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; text-align:left ! important; }
	.ce8 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:bold; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:middle; writing-mode:page; text-align:left ! important; }
	.ce9 { background-color:transparent; border-width:0.035cm; border-style:solid; border-color:#000000; color:#000000; font-size:11pt; font-style:normal; font-weight:normal; margin-left:0cm; text-shadow:none; font-family:微软雅黑; text-decoration:none ! important; vertical-align:top; writing-mode:page; }
	.co1 { width:12.402cm; }
	.co2 { width:1.755cm; }
	.co3 { width:2.267cm; }
	.ro1 { height:1.143cm; }
	.ro10 { height:1.651cm; }
	.ro11 { height:3.738cm; }
	.ro12 { height:3.21cm; }
	.ro13 { height:2.201cm; }
	.ro14 { height:1.672cm; }
	.ro15 { height:2.223cm; }
	.ro16 { height:1.122cm; }
	.ro17 { height:3.874cm; }
	.ro18 { height:4.263cm; }
	.ro19 { height:3.302cm; }
	.ro2 { height:0.55cm; }
	.ro20 { height:2.752cm; }
	.ro3 { height:0.579cm; }
	.ro4 { height:2.794cm; }
	.ro5 { height:2.157cm; }
	.ro6 { height:1.101cm; }
	.ro7 { height:0.496cm; }
	.ro8 { height:1.104cm; }
	.ro9 { height:1.632cm; }
	.T1 { color:#000000; font-family:微软雅黑; font-size:11pt; font-style:normal; text-shadow:none; text-decoration:none ! important; font-weight:normal; }
	.T2 { color:#000000; font-family:微软雅黑; font-size:11pt; font-style:normal; text-shadow:none; text-decoration:none ! important; font-weight:bold; }
	<!-- ODF styles with no properties representable as CSS -->
	{ }
	</style></head><body dir="ltr" style="margin-top:1.905cm; margin-bottom:1.905cm; margin-left:1.778cm; margin-right:1.778cm; "><table border="0" cellspacing="0" cellpadding="0" class="ta1"><colgroup><col width="542"/><col width="542"/><col width="542"/><col width="77"/><col width="99"/></colgroup><tr class="ro1"><td style="text-align:left;width:12.402cm; " class="ce1"><p>start_kernel(){} @ init/main.c</p></td><td style="text-align:left;width:12.402cm; " class="ce6"><p>Level 2</p></td><td style="text-align:left;width:12.402cm; " class="ce6"><p>Level 3</p></td><td style="text-align:left;width:1.755cm; " class="ce16"> </td><td style="text-align:left;width:2.267cm; " class="ce16"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce2"><p>set_task_stack_end_magic(&amp;init_task);</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>设置栈尾魔术字，防止溢出</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td rowspan="2" style="text-align:left;width:12.402cm; " class="ce3"><p>smp_setup_processor_id();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>获取引导的 CPU 物理 ID 并建立逻辑映射</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>smp_setup_processor_id()</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>pr_info("Booting Linux on physical CPU 0x%x\n", mpidr);</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro4"><td style="text-align:left;width:12.402cm; " class="ce2"><p>debug_objects_early_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce8"><p>目的<span class="T1">： 在内存分配器（如 </span><span class="T1">Slab</span><span class="T1">）初始化前，提供可立即使用的调试</span><span class="T1">对象，避免动态内存分配失败。</span></p><p><span class="T1"> </span><span class="T2">操作</span><span class="T1">：</span></p><p><span class="T1"> </span><span class="T1">1. </span><span class="T1">初始化对象哈希表锁（</span><span class="T1">obj_hash</span><span class="T1">）</span></p><p><span class="T1"> </span><span class="T1">2. </span><span class="T1">构建静态对象池（</span><span class="T1">obj_static_pool</span><span class="T1">）</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro5"><td style="text-align:left;width:12.402cm; " class="ce2"><p>cgroup_init_early();</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>在系统引导时初始化cgroups，并初始化需要提前初始化的任何子系统。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>cgroups （Control Groups，控制组）是内核提供的一种机制，用于限制、记录和隔离进程组对系统资源的使用。</p><p> 它通过将进程分组，并为每个组分配特定的资源配额，实现对 CPU、内存、磁盘 I/O、网络等资源的精细化管控。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>local_irq_disable();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>禁用当前 CPU 上的所有可屏蔽中断，确保临界区代码的执行不被异步事件打断。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td rowspan="5" style="text-align:left;width:12.402cm; " class="ce3"><p>boot_cpu_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>通过内核的 cpumask 设置引导 CPU 的状态</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>set_cpu_online(cpu, true);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>设置 CPU 为<span class="T2">在线</span><span class="T1">，表示可参与任务调度。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>set_cpu_active(cpu, true);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>设置 CPU 为<span class="T2">活跃</span><span class="T1">，表示正在运行内核代码。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>set_cpu_present(cpu, true);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>设置 CPU 为<span class="T2">存在</span><span class="T1">，表示物理存在于系统中。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>set_cpu_possible(cpu, true);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>设置 CPU 为<span class="T2">可能</span><span class="T1">，表示可被调度器考虑用于任务分配。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>page_address_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>初始化高端内存（High Memory）的地址映射管理框架，确保内核能正确访问超出直接映射区域的物理内存。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro7"><td colspan="3" style="text-align:left;width:12.402cm; " class="ce2"><p>pr_notice("%s", linux_banner);</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td rowspan="27" style="text-align:left;width:12.402cm; " class="ce3"><p>setup_arch(&amp;command_line);</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>体系结构相关的核心初始化函数，其子函数协同完成硬件平台检测、内存管理初始化、设备树解析及多核启动等关键任务。</p></td><td style="text-align:left;width:12.402cm; " class="ce13"><p>@ /arch/arm/kernel/setup.c</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro9"><td style="text-align:left;width:12.402cm; " class="ce4"><p>setup_processor();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>读取CPU ID（通过CP15协处理器），匹配内核支持的处理器类型（proc_info_list），初始化处理器相关全局变量（如cpu_name、缓存配置），并调用架构特定的_proc_init函数。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro5"><td style="text-align:left;width:12.402cm; " class="ce4"><p>mdesc = setup_machine_fdt(__atags_pointer);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>解析设备树（DTB），根据设备树根节点的compatible属性匹配machine_desc结构体，确定硬件平台（如开发板型号）。__atags_pointer是设备树物理地址（由Bootloader传入）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro9"><td style="text-align:left;width:12.402cm; " class="ce4"><p>if (!mdesc)</p><p>  mdesc = setup_machine_tags(__atags_pointer, __machine_arch_type);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>备选方案：若设备树解析失败，通过传统tag列表（如ATAGS）匹配machine_desc（旧式启动传参）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>if (!mdesc) {</p><p>  early_print("\nError: invalid dtb and unrecognized/unsupported machine ID\n");</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>dump_stack_set_arch_desc(%s, mdesc-&gt;name);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>设置栈回溯的架构描述信息，便于调试时标识硬件平台（如打印"Freescale i.MX6"）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce4"><p>early_fixmap_init();</p></td><td rowspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化fixmap（固定映射）和early_ioremap机制，允许在页表完全建立前访问特定硬件（如串口、设备树）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>early_ioremap_init();</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>parse_early_param();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>解析内核启动参数（如mem=256M），影响后续内存分配和设备初始化策略。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro5"><td style="text-align:left;width:12.402cm; " class="ce4"><p>early_mm_init(mdesc);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化bootmem_data结构（与memblock关联），为free_all_bootmem()释放内存到伙伴系统铺路。</p><p>设置内存区域（ZONE_DMA/ZONE_NORMAL）的初步划分，依赖adjust_lowmem_bounds()的结果</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>setup_dma_zone(mdesc);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>配置DMA内存区域，确保外设可通过DMA访问连续物理内存。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>xen_early_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化Xen虚拟化支持（若启用）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>efi_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化EFI运行时服务（如UEFI变量访问）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>adjust_lowmem_bounds();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>确定低端内存（ZONE_NORMAL）与高端内存（ZONE_HIGHMEM）的边界，设置全局变量high_memory</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro11"><td style="text-align:left;width:12.402cm; " class="ce4"><p>arm_memblock_init(mdesc);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化物理内存的临时管理框架memblock，为后续内存分配奠定基础。</p><p>遍历设备树或BIOS提供的物理内存区域（regions），将其注册到memblock.memory中。</p><p>保留关键区域（如内核代码、设备树、预留内存），避免被分配（通过memblock_reserve()）。</p><p>标记不可用内存（如设备空洞），确保后续分配不覆盖关键数据。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>adjust_lowmem_bounds();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>内存可能已被删除，因此请重新计算边界。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro12"><td style="text-align:left;width:12.402cm; " class="ce4"><p>early_ioremap_reset();</p></td><td style="text-align:left;width:12.402cm; " class="ce14"><p>作用<span class="T1">：释放早期</span><span class="T1">IO</span><span class="T1">映射（</span><span class="T1">early_ioremap</span><span class="T1">）占用的临时资源，移交控</span><span class="T1">制权给完整的内存管理子系统。</span></p><p><span class="T1">•</span><span class="T1">清理</span><span class="T1">prev_map</span><span class="T1">和</span><span class="T1">slot_virt</span><span class="T1">数组（记录临时映射的虚拟地址）。</span></p><p><span class="T1">•</span><span class="T1">回收</span><span class="T1">fixmap</span><span class="T1">中的</span><span class="T1">FIX_BTMAP</span><span class="T1">区域，确保后续</span><span class="T1">ioremap</span><span class="T1">或</span><span class="T1">vmalloc</span><span class="T1">可</span><span class="T1">重用该虚拟地址空间。</span><span class="T2">调用时机</span><span class="T1">：在永久内存管理（如</span><span class="T1">paging_init()</span><span class="T1">）就绪后调用，标志临时映射机制退出。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>paging_init(mdesc);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>建立完整页表，开启MMU，切换至虚拟地址空间运行，并初始化零页（zero page）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>request_standard_resources(mdesc);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>注册标准硬件资源（如I/O内存、中断号）到内核资源树，防止资源冲突</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>unflatten_device_tree();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>将扁平设备树（DTB）转换为内核device_node结构体树，构建设备拓扑。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>arm_dt_init_cpu_maps();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>解析设备树的CPU节点，生成CPU逻辑ID与物理ID的映射表，支持SMP调度。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>psci_dt_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化PSCI（Power State Coordination Interface），为CPU热插拔和电源管理提供固件接口。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>smp_init_cpus();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>检测CPU核心数量</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>smp_build_mpidr_hash();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>构建多核ID哈希表，为SMP调度做准备</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>hyp_mode_check();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>检测是否处于Hypervisor模式（ARM虚拟化扩展），为KVM等虚拟化模块提供支持。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>reserve_crashkernel();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>保留内存区域用于内核崩溃转储（Kdump），便于事后调试。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>if (mdesc-&gt;init_early)</p><p>  mdesc-&gt;init_early();</p></td><td style="text-align:left;width:12.402cm; " class="ce7"><p>执行机器描述符的定制化早期初始化（如开发板特定的时钟或外设设置）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro9"><td style="text-align:left;width:12.402cm; " class="ce2"><p>mm_init_cpumask(&amp;init_mm);</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>初始化 init_mm 结构体中的 cpu_bitmap 字段。</p><p>init_mm 是内核启动时使用的全局内存描述符（struct mm_struct），代表内核空间的地址映射。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>在 SMP 系统中，每个 CPU 核心有独立的 TLB（Translation Lookaside Buffer）缓存。cpu_bitmap 掩码用于跟踪哪些 CPU 核心的 TLB 缓存中可能存在与 init_mm 相关的页表项。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro9"><td style="text-align:left;width:12.402cm; " class="ce2"><p>setup_command_line(command_line);</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>保存和整理内核启动时传递的命令行参数（cmdline）​，为后续参数解析提供统一的数据基础。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>该函数会将从Bootloader（如U-Boot）传递的原始命令行参数（boot_command_line）完整拷贝到全局变量saved_command_line中。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>setup_nr_cpu_ids();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>通过解析cpu_possible_mask位图（表示所有可能激活的CPU核心），计算实际可用的CPU数量</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>setup_per_cpu_areas();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>为多核系统（SMP）初始化 Per-CPU 变量机制。其核心作用是为每个 CPU 核心创建独立的变量副本，避免多核竞争并提升性能。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>smp_prepare_boot_cpu();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>为多核（SMP）系统建立引导处理器的运行环境，并协调后续辅助处理器（AP）的启动准备。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>boot_cpu_hotplug_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>为运行时CPU热插拔提供底层支持，允许在不重启系统的情况下增删CPU资源。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>build_all_zonelists(NULL);</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>构建全局内存域（zone）的层级备用列表（zonelist）​，为后续内存分配策略提供优先级框架。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>page_alloc_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>为CPU热插拔事件注册回调函数，确保在CPU动态上下线时同步处理与该CPU关联的内存页面。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro7"><td colspan="3" style="text-align:left;width:12.402cm; " class="ce2"><p>pr_notice("Kernel command line: %s\n", boot_command_line);</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>jump_label_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce9"><p>初始化静态键（Static Keys）机制，该机制通过运行时动态修改代码指令（如将nop替换为jmp）来消除频繁执行的条件分支（如if语句），从而避免分支预测失败的开销。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td rowspan="2" style="text-align:left;width:12.402cm; " class="ce3"><p>parse_early_param();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>解析并执行需在内存管理、设备驱动等核心子系统初始化前处理的启动参数的关键环节。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>parse_early_options(cmdline);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>将命令行拆分为key=val格式。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro13"><td style="text-align:left;width:12.402cm; " class="ce4"><p>after_dashes = parse_args("Booting kernel",</p><p>      static_command_line, __start___param,</p><p>      __stop___param - __start___param,</p><p>      -1, -1, NULL, &amp;unknown_bootoption);</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>将命令行字符串（如"console=ttyAMA0 earlycon mem=768M"）拆分为key=val格式的独立参数，遍历预注册的kernel_param结构数组，匹配参数名并调用对应的设置函数（setup_func）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td colspan="3" style="text-align:left;width:12.402cm; " class="ce4"><p>if (!IS_ERR_OR_NULL(after_dashes))</p><p>  parse_args("Setting init args", after_dashes, NULL, 0, -1, -1,</p><p>      NULL, set_init_arg);</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro12"><td style="text-align:left;width:12.402cm; " class="ce2"><p>setup_log_buf(0);</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>是内核日志系统初始化的核心环节，负责在内核启动过程中动态分配并配置printk使用的环形缓冲区（ring buffer）。</p><p>若early=1（早期调用），仅初始化静态缓冲区；若early=0（常规调用），执行动态分配。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>在内核启动早期（内存管理器未就绪时），printk使用静态预分配的日志缓冲区（__log_buf），大小固定（默认16KB，由CONFIG_LOG_BUF_SHIFT配置）</p><p>。setup_log_buf()在内存管理器初始化后，​动态分配更大的缓冲区​（通常为256KB~1MB），并迁移早期日志数据，避免静态缓冲区过小导致日志丢失。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro14"><td rowspan="3" style="text-align:left;width:12.402cm; " class="ce3"><p>vfs_caches_init_early();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>是<span class="T2">虚拟文件系统（</span><span class="T2">VFS</span><span class="T2">）启动早期初始化的核心环节</span><span class="T1">，主要负责为目</span><span class="T1">录项（</span><span class="T1">dentry</span><span class="T1">）和索引节点（</span><span class="T1">inode</span><span class="T1">）的哈希表预分配内存并初始化</span><span class="T1">数据结构，确保后续文件系统操作（如路径解析、文件访问）具备基</span><span class="T1">础支持。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>dcache_init_early();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>创建并初始化目录项哈希表（dentry_hashtable），用于缓存文件路径与目录项的映射关系。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>inode_init_early();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>创建索引节点哈希表（inode_hashtable），缓存文件元数据（如权限、大小）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>sort_main_extable();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>异常处理机制的关键优化环节，负责对内核异常表（__ex_table节区）进行排序，确保内核在运行时能高效定位并修复指令执行中的错误（如页故障、空指针访问等）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>trap_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce4"><p>系统启动阶段初始化中断和异常处理机制的核心函数，负责设置中断描述符表（IDT）并配置硬件/软件异常的处理程序，确保内核能够正确响应CPU异常、硬件中断及系统调用。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro15"><td rowspan="11" style="text-align:left;width:12.402cm; " class="ce3"><p>mm_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce10"><p>内存管理子系统初始化的核心入口。</p><p><span class="T1">将启动阶段由 </span><span class="T1">memblock</span><span class="T1">分配器管理的物理内存，移交至伙伴系统</span><span class="T1">（</span><span class="T1">Buddy System</span><span class="T1">）​​ 和 ​</span><span class="T1">SLAB/SLUB </span><span class="T1">分配器，实现内核运行期动态内</span><span class="T1">存分配机制。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>page_ext_init_flatmem();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化页扩展元数据（struct page_ext），用于跟踪页状态（如冷热页、内存回收标记）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td rowspan="5" style="text-align:left;width:12.402cm; " class="ce11"><p>mem_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce7"><p>mm_init()是 Linux 内存管理从启动静态配置转向运行期动态分配的枢纽，</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce9"><p>free_unused_memmap()：释放内核镜像占用的内存映射中未使用的区域。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce9"><p>free_all_bootmem()：​将 memblock保留外的所有物理页移交至伙伴系统，标志动态内存管理的开始。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce9"><p>mem_init_print_info()：打印虚拟内存布局（如内核文本段、vmalloc 范围），便于调试。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce9"><p>pr_notice("Virtual kernel memory layout:\n"…</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>kmem_cache_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化 ​SLUB 分配器​（Linux 4.19 默认的小内存分配器），创建 kmem_cache等核心缓存，优化小于页面的内存分配效率。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>pgtable_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化页表缓存​（如 pgd_cache），加速进程页表的创建与销毁。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>vmalloc_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始化 ​vmalloc 虚拟地址空间，建立红黑树管理非连续内存区域，为后续 vmalloc()调用提供支持。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>ioremap_huge_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>为大尺寸 I/O 内存映射（如 GPU 显存）预留虚拟地址空间，提升设备驱动访问效率。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>ftrace_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>Ftrace（Function Tracer）跟踪框架的核心初始化入口，负责在启动阶段构建动态函数追踪所需的基础设施，为后续内核调试与性能分析提供支持。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>early_trace_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>在内存管理就绪前，通过静态预分配和指令初始化，为Ftrace提供零开销的插桩基础与关键元数据，确保后续跟踪功能可安全、高效地动态启用。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro16"><td rowspan="6" style="text-align:left;width:12.402cm; " class="ce3"><p>sched_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce8"><p>调度子系统初始化的核心入口<span class="T1">，负责构建多任务调度框架，为进程管</span><span class="T1">理和</span><span class="T1">CPU</span><span class="T1">资源分配奠定基础。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>通过init_rt_bandwidth()和init_dl_bandwidth()配置周期性与单次运行时间配额。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为实时任务（def_rt_bandwidth）和Deadline任务（def_dl_bandwidth）设置全局带宽限制，防止实时进程独占CPU导致普通进程饥饿。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro17"><td colspan="2" style="text-align:left;width:12.402cm; " class="ce8"><p>运行队列（Runqueue）构建</p><p><span class="T1">为每个</span><span class="T1">CPU</span><span class="T1">核心初始化</span><span class="T1">struct rq</span><span class="T1">运行队列，包含三个关键子队列：</span></p><p><span class="T1">•​</span><span class="T1">CFS</span><span class="T1">运行队列​（</span><span class="T1">cfs_rq</span><span class="T1">）：管理普通进程（</span><span class="T1">SCHED_NORMAL</span><span class="T1">）的</span><span class="T1">完全公平调度</span></p><p><span class="T1">•​</span><span class="T1">实时运行队列​（</span><span class="T1">rt_rq</span><span class="T1">）：处理</span><span class="T1">SCHED_FIFO/SCHED_RR</span><span class="T1">实时进程</span></p><p><span class="T1">•​</span><span class="T1">Deadline</span><span class="T1">队列​（</span><span class="T1">dl_rq</span><span class="T1">）：支持</span><span class="T1">SCHED_DEADLINE</span><span class="T1">硬实时任务</span></p><p><span class="T1">每个队列通过红黑树或优先级链表管理任务，确保高效调度决策。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce2"><p>set_load_weight(&amp;init_task, false);</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>设置初始任务的负载权重</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>init_idle(current, smp_processor_id());</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>初始任务（init_task）设置，将当前执行上下文（内核启动线程）设为idle任务。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce2"><p>preempt_disable();</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>禁用抢占 - 早期启动调度在我们第一次调用 cpu_idle() 之前非常脆弱。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"> </td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro12"><td style="text-align:left;width:12.402cm; " class="ce2"><p>radix_tree_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>基数树（Radix Tree）子系统的核心初始化入口，负责为内核中广泛使用的基数树数据结构建立基础运行环境。</p></td><td style="text-align:left;width:12.402cm; " class="ce14"><p>作用<span class="T1">​：通过 </span><span class="T1">kmem_cache_create()</span><span class="T1">创建名为 </span><span class="T1">"radix_tree_node"</span><span class="T1">的 </span><span class="T1">Slab </span><span class="T1">缓存，用于高效分配和回收 </span><span class="T1">struct radix_tree_node</span><span class="T1">结构体的</span><span class="T1">内存。</span></p><p><span class="T2">原因</span><span class="T1">：基数树节点（如中间节点和叶子节点）在树操作中频繁创建和</span><span class="T1">销毁（例如插入或删除数据），使用 </span><span class="T1">Slab </span><span class="T1">缓存可显著提升内存分配</span><span class="T1">效率，减少内存碎片。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro14"><td style="text-align:left;width:12.402cm; " class="ce2"><p>housekeeping_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce8"><p>初始化“内务管理”（Housekeeping）机制<span class="T1">的关键函数，主要作</span><span class="T1">用是为</span><span class="T1">CPU</span><span class="T1">隔离特性（如</span><span class="T1">isolcpus</span><span class="T1">参数）提供底层支持，确保非隔离</span><span class="T1">CPU</span><span class="T1">能够高效处理系统基础任务（如调度、定时器、中断等）。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro14"><td rowspan="4" style="text-align:left;width:12.402cm; " class="ce3"><p>workqueue_init_early();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce8"><p>工作队列（workqueue）子系统的第一阶段初始化函数<span class="T1">，负责在系</span><span class="T1">统启动早期建立工作队列的基础框架，确保后续内核代码可以安全地</span><span class="T1">创建队列和提交任务。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro8"><td style="text-align:left;width:12.402cm; " class="ce4"><p>KMEM_CACHE(pool_workqueue, SLAB_PANIC);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>创建 pool_workqueue结构的专用内存缓存，提升高频对象的分配效率.</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro18"><td style="text-align:left;width:12.402cm; " class="ce4"><p>for_each_possible_cpu(cpu){}</p><p>for (i = 0; i &lt; NR_STD_WORKER_POOLS; i++){}</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>为每个 CPU 默认创建 ​两个线程池​：</p><p>•​普通优先级池​（nice=0）</p><p>•​高优先级池​（nice=HIGHPRI_NICE_LEVEL，通常为 -20）。</p><p> </p><p>每个线程池绑定到特定 CPU，配置属性包括：</p><p>•cpumask：限制任务仅在绑定 CPU 运行。</p><p>•node：NUMA 节点关联（优化内存访问）。</p><p>•nice：调整线程调度优先级。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>alloc_workqueue</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>创建 7 个默认队列供内核模块直接使用，避免重复创建。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>rcu_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>Read-Copy-Update（RCU）同步机制的初始化入口，负责构建RCU的核心基础设施，以支持高效的无锁读操作和安全的延迟数据更新。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro13"><td style="text-align:left;width:12.402cm; " class="ce2"><p>trace_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>内核追踪（Tracing）子系统的初始化入口，负责为内核的运行时行为监控和调试建立基础框架。其核心作用是为后续的跟踪工具（如ftrace、kprobe等）提供基础设施支持，确保内核开发者或运维人员能够动态观测系统内部状态而无需重启或修改代码。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro12"><td style="text-align:left;width:12.402cm; " class="ce4"><p>if (initcall_debug)</p><p>  initcall_debug_enable();</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>通过内核启动参数 initcall_debug 启用的调试模式，用于详细追踪initcall 初始化函数的执行过程。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>启用后，内核会在每个initcall函数（如驱动初始化）​调用前和返回后打印详细信息，包括：</p><p>•函数名及内存地址（如calling rockchip_isp_probe+0x0/0x1000 @ ffffff8008ab8000）</p><p>•返回值（成功为0，失败为负数）</p><p>•执行耗时（微秒级，如returned 0 after 2563 usecs）</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>context_tracking_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>上下文跟踪（Context Tracking）子系统的初始化入口，主要作用是为内核提供动态监控执行上下文切换的能力，从而支持性能分析、调度优化和低延迟场景下的精确状态管理。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>early_irq_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>中断子系统初始化流程的第一阶段，主要负责为硬件中断建立基础管理框架，确保后续中断处理程序能正确注册和触发。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>init_IRQ();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>中断子系统初始化的核心阶段，负责完成中断控制器的硬件配置、中断栈分配以及中断描述符的动态管理，为内核提供完整的中断处理能力。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce2"><p>tick_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化周期性时钟中断（Tick）框架，为调度器提供时间基准。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce4"><p>rcu_init_nohz();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为RCU（Read-Copy-Update）子系统适配Tickless模式（NO_HZ）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce4"><p>init_timers();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化传统定时器框架（基于jiffies）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce4"><p>hrtimers_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化高精度定时器（High-Resolution Timers），支持纳秒级定时。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce4"><p>softirq_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化软中断子系统，处理中断下半部任务。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce4"><p>timekeeping_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化内核时间维护框架，统一管理时间源和时钟。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce4"><p>time_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>体系结构相关的时钟初始化。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>random_init(command_line);</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化内核随机数生成器（RNG），解析启动参数中与随机数相关的配置（如random.trust_cpu），并建立熵池（entropy pool）的初始状态。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>boot_init_stack_canary();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化栈溢出保护机制——“金丝雀值”（Stack Canary），用于检测缓冲区溢出攻击。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>perf_event_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化性能监控子系统（Performance Events），为硬件性能计数器（PMC）和软件事件提供支持。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce2"><p>profile_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>启用内核代码执行频率分析（Profiling），统计函数调用热点。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>call_function_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化SMP系统中CPU间函数调用（Inter-Processor Interrupt, IPI）机制。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>local_irq_enable();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>启用当前 CPU 的中断响应（IRQ），通过清除 ARM 架构 CPSR 寄存器的中断屏蔽位（I-bit）实现。通常在初始化后期或退出原子操作后调用，确保中断能正常触发。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro19"><td style="text-align:left;width:12.402cm; " class="ce2"><p>kmem_cache_init_late();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>完成 SLUB/SLAB 内存分配器的后期初始化：</p><p>•回收空闲内存块（kmem_cache_shrink()）</p><p>•为每个内存控制组（memcg）创建 kmem_cache结构体</p><p>•初始化每 CPU 缓存池（init_per_cpu_pageset()），优化高频小内存分配效率。</p><p> </p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>console_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化控制台子系统，注册 console_driver驱动，激活早期打印（如 printk输出到串口），是内核调试信息可视化的基础。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce2"><p>lockdep_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化锁依赖跟踪器，动态检测死锁场景（如互斥锁嵌套顺序错误）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>locking_selftest();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>执行锁机制自测试，验证自旋锁、信号量等互斥原语的正确性，防止启动后出现并发错误。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>kmemleak_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化内存泄漏检测器，跟踪未释放的动态内存分配（如 kmalloc），通过 /sys/kernel/debug/kmemleak报告可疑泄漏点。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>debug_objects_mem_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为调试对象（如活跃中的定时器、RCU 回调）分配内存，检测内核对象生命周期错误（如重复释放）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>setup_per_cpu_pageset();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为每个 CPU 核心分配并初始化页帧缓存（per_cpu_pageset），加速物理页分配（如 alloc_pages()）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>numa_policy_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化NUMA（非统一内存访问）系统的内存策略框架，为struct mempolicy和struct sp_node创建专用SLAB缓存。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>acpi_early_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>解析 ACPI（高级配置与电源接口）表，获取处理器拓扑、电源管理事件等硬件信息，为电源管理和热插拔提供支持。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>late_time_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>后期时间子系统初始化，校准高精度时钟源（如 TSC、HPET），确保 gettimeofday等系统调用返回正确时间。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>sched_clock_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化调度器时钟源，为进程调度提供纳秒级时间戳，支撑 CPU 负载统计和公平调度。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>calibrate_delay();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>校准 CPU 的 BogoMIPS 值（Bogus Millions of Instructions Per Second），用于 udelay()等忙等待函数的微秒级延时精度。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>arch_cpu_finalize_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>架构相关的 CPU 最终初始化（如 x86 的微码更新、ARM 的异常向量表设置），确保硬件特性就绪。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>pid_idr_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化 PID（进程 ID）分配器，基于 IDR 机制高效管理进程号空间，支撑 fork()等系统调用。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>anon_vma_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化匿名虚拟内存区域（Anonymous VMA）的 slab 缓存，优化进程私有内存（如堆、栈）的管理效率。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>efi_enter_virtual_mode();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>切换 EFI（统一可扩展固件接口）到虚拟地址模式，将固件运行时服务（如 SetVirtualAddressMap）映射到内核虚拟地址空间，支持 UEFI 系统调。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>thread_stack_cache_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为线程栈创建专用SLAB缓存（thread_stack_cache），优化线程创建时的栈分配效率。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>cred_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为凭证结构（struct cred）创建SLAB缓存，用于管理进程的安全上下文​（UID/GID、能力集等）。</p><p>支持权限检查与切换（如setuid()）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro13"><td style="text-align:left;width:12.402cm; " class="ce2"><p>fork_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>设置进程创建参数：</p><p>•根据系统内存计算允许的最大进程数​（pid_max），默认值32768</p><p>。</p><p>•初始化任务结构SLAB缓存（task_struct），优化进程创建效率。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro20"><td style="text-align:left;width:12.402cm; " class="ce2"><p>proc_caches_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为进程相关对象创建SLAB缓存，包括：</p><p>•signal_handlers（信号处理器）</p><p>•sighand_struct（信号处理描述符）</p><p>•files_struct（文件描述符表）</p><p>提升进程资源的分配速度。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>uts_ns_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为UTS命名空间（Unix Timesharing System）创建SLAB缓存，隔离主机名、域名等系统标识。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>buffer_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化块设备缓冲区的LRU链表和哈希表，管理buffer_head结构（描述块设备I/O的元数据）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>key_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化密钥管理子系统，为内核加密API（如TLS）提供密钥存储和查询服务。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>security_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>加载Linux安全模块（LSM）框架，按配置顺序（如AppArmor、SELinux）初始化安全钩子函数。</p><p>用内核的强制访问控制（MAC）能力。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>dbg_late_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>延迟执行的调试设施初始化，例如：</p><p>•动态启用kmemleak（内存泄漏检测）</p><p>•注册debugfs文件</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro20"><td style="text-align:left;width:12.402cm; " class="ce2"><p>vfs_caches_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化虚拟文件系统（VFS）核心缓存：</p><p>•dentry_cache（目录项缓存）</p><p>•inode_cache（索引节点缓存）</p><p>•挂载点哈希表。</p><p>加速路径查找与文件访问。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>pagecache_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化页缓存（Page Cache）的基数树（Radix Tree），加速文件数据的缓存查找。</p><p>为address_space结构提供基础支持，优化文件I/O性能。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>signals_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化信号处理机制：</p><p>•创建sigqueue的SLAB缓存（信号队列）</p><p>•注册信号处理软中断TASK_SIG</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>seq_file_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>为顺序文件（seq_file）创建SLAB缓存，简化内核序列化输出（如/proc文件实现）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro10"><td style="text-align:left;width:12.402cm; " class="ce2"><p>proc_root_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>挂载/proc虚拟文件系统，暴露内核状态和进程信息（如/proc/cpuinfo）。</p><p>注册proc_fs_type，允许用户空间读取系统运行时数据。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>nsfs_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>注册nsfs伪文件系统，管理命名空间对象（如IPC、网络），支持/proc/&lt;pid&gt;/ns目录。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>cpuset_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化CPUSET子系统，绑定进程到指定CPU和NUMA节点，与cgroup协同工作。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro13"><td style="text-align:left;width:12.402cm; " class="ce2"><p>cgroup_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化控制组（cgroup）框架：</p><p>•创建根cgroup（cgrp_dfl_root）</p><p>•注册cgroup_fs_type文件系统。</p><p>支持CPU、内存等资源的隔离和配额管理。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>taskstats_init_early();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化任务统计接口，通过Netlink向用户空间报告进程的CPU/内存使用数据（如libtaskstats工具）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>delayacct_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>启用任务延迟统计，记录进程等待CPU、I/O等资源的时间，用于性能分析。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro11"><td style="text-align:left;width:12.402cm; " class="ce2"><p>acpi_subsystem_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>ACPI子系统的总入口，负责初始化高级配置与电源管理接口。</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>关键流程​：</p><p>•加载ACPI表（如DSDT、FADT），解析硬件配置和电源管理能力。</p><p>•注册ACPI总线类型（acpi_bus_type），挂载处理器、内存、PCIe等设备的扫描处理器。</p><p>•初始化调试器（acpi_debugger_init），提供ACPI BIOS和寄存器的调试支持。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>arch_post_acpi_subsys_init();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>执行ACPI初始化后的架构相关定制操作。解析ACPI表中的GIC中断控制器映射。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>sfi_init_late();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>初始化Intel简化固件接口（SFI），用于替代传统ACPI的轻量级固件方案（常见于嵌入式设备）。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro2"><td style="text-align:left;width:12.402cm; " class="ce2"><p>efi_free_boot_services();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>释放EFI启动阶段占用的内存资源，移交控制权给内核。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro11"><td rowspan="2" style="text-align:left;width:12.402cm; " class="ce3"><p>rest_init();</p></td><td style="text-align:left;width:12.402cm; " class="ce4"><p>内核启动的终局函数，创建用户空间首个进程。</p></td><td style="text-align:left;width:12.402cm; " class="ce14"><p>核心流程<span class="T1">：</span></p><p><span class="T1">•</span><span class="T1">创建内核线程</span><span class="T1">init</span><span class="T1">（</span><span class="T1">PID=1</span><span class="T1">），执行</span><span class="T1">kernel_init</span><span class="T1">函数挂载根文件系统</span><span class="T1">并启动用户态</span><span class="T1">/sbin/init</span><span class="T1">。</span></p><p><span class="T1">•</span><span class="T1">创建</span><span class="T1">kthreadd</span><span class="T1">（</span><span class="T1">PID=2</span><span class="T1">）管理内核工作线程（如软中断、</span><span class="T1">RCU</span><span class="T1">回调</span><span class="T1">）。</span></p><p><span class="T1">•</span><span class="T1">调用</span><span class="T1">sched_init</span><span class="T1">完成调度器最终配置，并启动空闲循环（</span><span class="T1">cpu_idle</span><span class="T1">）</span><span class="T1">。</span></p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro3"><td style="text-align:left;width:12.402cm; " class="ce4"><p>pid = kernel_thread(kernel_init, NULL, CLONE_FS);</p></td><td style="text-align:left;width:12.402cm; " class="ce9"><p>kernel_init_freeable();</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro6"><td style="text-align:left;width:12.402cm; " class="ce2"><p>prevent_tail_call_optimization();</p></td><td colspan="2" style="text-align:left;width:12.402cm; " class="ce7"><p>禁用尾调用优化（Tail Call Optimization, TCO），防止内核栈保护机制失效。</p></td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro7"><td style="text-align:left;width:12.402cm; " class="ce5"> </td><td style="text-align:left;width:12.402cm; " class="ce12"> </td><td style="text-align:left;width:12.402cm; " class="ce15"> </td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr><tr class="ro7"><td style="text-align:left;width:12.402cm; " class="ce5"> </td><td style="text-align:left;width:12.402cm; " class="ce12"> </td><td style="text-align:left;width:12.402cm; " class="ce15"> </td><td style="text-align:left;width:1.755cm; " class="Excel_20_Built-in_20_Normal"> </td><td style="text-align:left;width:2.267cm; " class="Default"> </td></tr></table></body></html>